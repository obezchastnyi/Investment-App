// <auto-generated />
using System;
using InvestmentApp.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvestmentAppServer.Migrations
{
    [DbContext(typeof(InvestmentAppDbContext))]
    [Migration("20230910051134_InvestmentApp_InitMigration")]
    partial class InvestmentApp_InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvestmentApp.Models.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efcb778c-285f-4844-b184-c697c1b39c07"),
                            PasswordHash = "4A3AC69954D82B1156AAD57E83C86B434E33B57AE9DF31F4D25A8A2000AD0FC4:CFE528ADCEB6D77A0BB1CE8F90ECDA1F:50000:SHA256",
                            UserName = "Andrews-Fred",
                            UserRoleId = 2
                        },
                        new
                        {
                            Id = new Guid("6eccd119-f439-4190-af2a-0ae86f1ba775"),
                            PasswordHash = "518F612F0FFA27F8182A40AB87F4CDA9BBFA3A843D38088E512258DFA5297873:16A87429F8C22D68E6E1048D2439AEC0:50000:SHA256",
                            UserName = "Samson-Alex",
                            UserRoleId = 3
                        },
                        new
                        {
                            Id = new Guid("6281aee8-8774-4e33-a616-bb1b06d175c9"),
                            PasswordHash = "1FDF083EC56DCB80969048F198F2E6EB5AF57C27268204F4426825A5911DD1C9:B88C83CFA45F673373E19DA810B5367C:50000:SHA256",
                            UserName = "Admin",
                            UserRoleId = 4
                        },
                        new
                        {
                            Id = new Guid("0777899e-aeba-4b8c-a578-c918e8c4e962"),
                            PasswordHash = "020FDA3C6F9AA1B774720843FA5E1CF8D24C41C24BE99FCBC50BAB42EADE2C72:07F2DB38E00C991E6EDE4BFD6DED2A5F:50000:SHA256",
                            UserName = "SuperAdmin",
                            UserRoleId = 1
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Authentication.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Reader"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Writer"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Creator"
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Criteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a537539-3c57-4908-b36d-6594c9cb3dd0"),
                            Name = "Profitability"
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Enterprise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TaxNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Enterprise");

                    b.HasData(
                        new
                        {
                            Id = new Guid("785cbb0b-5a68-4a80-a184-64672e2a4f64"),
                            Address = "Ukraine, Kharkiv, Kharkiv Region",
                            BankAccount = "UA123456789",
                            Name = "T-Shirts Brand",
                            TaxNumber = 987321654L
                        },
                        new
                        {
                            Id = new Guid("72627cfc-4faf-49cf-a9d4-0066d2a4fad9"),
                            Address = "Ukraine, Kyiv, Kyiv Region",
                            BankAccount = "UA987654321",
                            Name = "Soccer Club",
                            TaxNumber = 321987654L
                        },
                        new
                        {
                            Id = new Guid("0e641783-4755-4d6b-bd29-8f1219a592a4"),
                            Address = "Ukraine, Dnipro, Dnipro Region",
                            BankAccount = "UA123789456",
                            Name = "IT Company",
                            TaxNumber = 123987456L
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Experts.Expert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CompetenceCoefficient")
                        .HasColumnType("double precision");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SurName");

                    b.ToTable("Expert");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6eccd119-f439-4190-af2a-0ae86f1ba775"),
                            CompetenceCoefficient = 3.0,
                            MiddleName = "John",
                            Name = "Alex",
                            Specialty = "Math",
                            SurName = "Samson",
                            WorkPlace = "Science Academy"
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Experts.ExpertIndustry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uuid");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("IndustryId");

                    b.ToTable("ExpertIndustry");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ce932ce-cbc2-4bb6-bf5b-221cb2c8d926"),
                            ExpertId = new Guid("6eccd119-f439-4190-af2a-0ae86f1ba775"),
                            IndustryId = new Guid("070bf07f-d429-4041-a4fb-833980bc2784"),
                            Rate = 0.0
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Experts.ExpertProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CashFlowRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PossibilityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PossibilityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ExpertProject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ab82f5d-3c47-40c3-803f-6a9b7a6332a0"),
                            CashFlowRate = 740.0,
                            ExpertId = new Guid("6eccd119-f439-4190-af2a-0ae86f1ba775"),
                            PeriodId = new Guid("d86b00c7-8029-4db8-a662-fc5e812e2fb1"),
                            PossibilityId = new Guid("b150ee68-de97-4b98-b71a-bc8e01dc1a52"),
                            ProjectId = new Guid("2915a0f7-db73-4eb7-9337-636ca5108b87")
                        },
                        new
                        {
                            Id = new Guid("5422b496-0d52-4ef4-8031-02da7eefe63a"),
                            CashFlowRate = 346.0,
                            ExpertId = new Guid("6eccd119-f439-4190-af2a-0ae86f1ba775"),
                            PeriodId = new Guid("d86b00c7-8029-4db8-a662-fc5e812e2fb1"),
                            PossibilityId = new Guid("b150ee68-de97-4b98-b71a-bc8e01dc1a52"),
                            ProjectId = new Guid("7868f125-9068-42a9-833e-86e75bf9931a")
                        },
                        new
                        {
                            Id = new Guid("9289308b-8cd0-4ec4-8498-f1124ee0fcd2"),
                            CashFlowRate = 914.0,
                            ExpertId = new Guid("6eccd119-f439-4190-af2a-0ae86f1ba775"),
                            PeriodId = new Guid("d86b00c7-8029-4db8-a662-fc5e812e2fb1"),
                            PossibilityId = new Guid("b150ee68-de97-4b98-b71a-bc8e01dc1a52"),
                            ProjectId = new Guid("e6d96611-5e32-47c7-a878-18fcd71af6f4")
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Industry");

                    b.HasData(
                        new
                        {
                            Id = new Guid("070bf07f-d429-4041-a4fb-833980bc2784"),
                            Name = "Metallurgy"
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.IndustryCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uuid");

                    b.Property<double>("IndustrySpecificWeight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IndustrySpecificWeight")
                        .IsUnique();

                    b.ToTable("IndustryCriteria");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab218829-e291-45ec-bc23-36e0b9bf14d1"),
                            CriteriaId = new Guid("6a537539-3c57-4908-b36d-6594c9cb3dd0"),
                            IndustryId = new Guid("070bf07f-d429-4041-a4fb-833980bc2784"),
                            IndustrySpecificWeight = 7.0
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Investors.Investor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SurName");

                    b.ToTable("Investor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efcb778c-285f-4844-b184-c697c1b39c07"),
                            Name = "Fred",
                            SurName = "Andrews"
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Investors.InvestorProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvestorId")
                        .HasColumnType("uuid");

                    b.Property<double>("MaxRiskRate")
                        .HasColumnType("double precision");

                    b.Property<double>("MinIncomeRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvestorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("InvestorProject");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9447dcb6-bc76-4ced-aa5f-0b5792c1aacf"),
                            InvestorId = new Guid("efcb778c-285f-4844-b184-c697c1b39c07"),
                            MaxRiskRate = 60.0,
                            MinIncomeRate = 30.0,
                            ProjectId = new Guid("2915a0f7-db73-4eb7-9337-636ca5108b87")
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RiskFreeDiscountRate")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiscountRate");

                    b.HasIndex("RiskFreeDiscountRate");

                    b.ToTable("Period");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d86b00c7-8029-4db8-a662-fc5e812e2fb1"),
                            DiscountRate = 10.0,
                            EndDate = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            RiskFreeDiscountRate = 5.0,
                            StartDate = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Possibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Rate");

                    b.ToTable("Possibility");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b150ee68-de97-4b98-b71a-bc8e01dc1a52"),
                            Rate = 16.0
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("StartingInvestmentSum")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2915a0f7-db73-4eb7-9337-636ca5108b87"),
                            EnterpriseId = new Guid("785cbb0b-5a68-4a80-a184-64672e2a4f64"),
                            Name = "New T-Shirts Collection",
                            StartingInvestmentSum = 1000.0
                        },
                        new
                        {
                            Id = new Guid("7868f125-9068-42a9-833e-86e75bf9931a"),
                            EnterpriseId = new Guid("72627cfc-4faf-49cf-a9d4-0066d2a4fad9"),
                            Name = "New Soccer Club Tournament",
                            StartingInvestmentSum = 100000000.0
                        },
                        new
                        {
                            Id = new Guid("e6d96611-5e32-47c7-a878-18fcd71af6f4"),
                            EnterpriseId = new Guid("0e641783-4755-4d6b-bd29-8f1219a592a4"),
                            Name = "IT Company Hiring Company",
                            StartingInvestmentSum = 100000.0
                        });
                });

            modelBuilder.Entity("InvestmentApp.Models.Authentication.User", b =>
                {
                    b.HasOne("InvestmentApp.Models.Authentication.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("InvestmentApp.Models.Experts.ExpertIndustry", b =>
                {
                    b.HasOne("InvestmentApp.Models.Experts.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentApp.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("InvestmentApp.Models.Experts.ExpertProject", b =>
                {
                    b.HasOne("InvestmentApp.Models.Experts.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentApp.Models.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentApp.Models.Possibility", "Possibility")
                        .WithMany()
                        .HasForeignKey("PossibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentApp.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Period");

                    b.Navigation("Possibility");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("InvestmentApp.Models.IndustryCriteria", b =>
                {
                    b.HasOne("InvestmentApp.Models.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentApp.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("InvestmentApp.Models.Investors.InvestorProject", b =>
                {
                    b.HasOne("InvestmentApp.Models.Investors.Investor", "Investor")
                        .WithMany()
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestmentApp.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("InvestmentApp.Models.Project", b =>
                {
                    b.HasOne("InvestmentApp.Models.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });
#pragma warning restore 612, 618
        }
    }
}
